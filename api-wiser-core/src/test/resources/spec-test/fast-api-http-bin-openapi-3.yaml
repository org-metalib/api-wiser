---
openapi: 3.0.2
info:
  title: FastAPI Httpbin
  description: "\n<a href=\"static/logo.png\"><img src=\"static/logo.png\" align=\"right\"
    /></a>\n\nHTTP Endpoints for easy testing of your app.\n\nBuilt with the <a href=\"https://fastapi.tiangolo.com/\">FastAPI
    framework</a>, \nthis is heavily based on the original <a href=\"https://httpbin.org/\">Httpbin</a>
    website.\n\n<a href=\"/about\">About this project</a> - \n<a href=\"/roadmap\">Development
    Roadmap</a> -\n<a href=\"/qrcode/\">Dead Simple QR Code Generator</a> -\n<a href=\"/test-password-manager-form/\">Form
    for testing Password Managers like 1Password and BitWarden</a>\n<p>\n\n<a href=\"https://github.com/dmuth/fastapi-httpbin\">GitHub
    repo</a>\n<p>\n\nRun locally in Docker: <tt><b>docker run -p 80:80 dmuth1/fastapi-httpbin</b></tt>\n\n<a
    href=\"https://httpbin.dmuth.org/\">Main Site</a> - Mirrors: \n<a href=\"https://fly.httpbin.dmuth.org/\">Fly</a>\n<a
    href=\"https://railway.httpbin.dmuth.org/\">Railway</a>\n<a href=\"https://render.httpbin.dmuth.org/\">Render</a>\n\n"
  version: 0.0.48
paths:
  "/get":
    get:
      tags:
        - HTTP Methods
      summary: The request's GET parameters.
      operationId: get_get_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
  "/get/args":
    get:
      tags:
        - HTTP Methods
      summary: JUST the request's GET parameters, without extra environment data.
      operationId: get_get_args_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
  "/post":
    post:
      tags:
        - HTTP Methods
      summary: The request's POST parameters. (Use -d in curl to specify data in JSON
        format)
      operationId: post_post_post
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
  "/put":
    put:
      tags:
        - HTTP Methods
      summary: The request's PUT parameters. (Use -d in curl to specify data in JSON
        format)
      operationId: put_put_put
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
  "/patch":
    patch:
      tags:
        - HTTP Methods
      summary: The request's PATCH parameters. (Use -d in curl to specify data in
        JSON format)
      operationId: patch_patch_patch
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
  "/delete":
    delete:
      tags:
        - HTTP Methods
      summary: The request's DELETE parameters.
      operationId: delete_delete_delete
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
  "/status/{codes}":
    get:
      tags:
        - Status Codes
      summary: Return status code or random one if multiple given as comma-delimited
        list (Underscores are also permitted as delimiters)
      operationId: get_status__codes__get
      parameters:
        - required: true
          schema:
            title: Codes
            minLength: 3
            pattern: "^[0-9,_]+$"
            type: string
          example: '200,201,204'
          name: codes
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    put:
      tags:
        - Status Codes
      summary: Return status code or random one if multiple given as comma-delimited
        list (Underscores are also permitted as delimiters)
      operationId: get_status__codes__put
      parameters:
        - required: true
          schema:
            title: Codes
            minLength: 3
            pattern: "^[0-9,_]+$"
            type: string
          example: '200,201,204'
          name: codes
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    post:
      tags:
        - Status Codes
      summary: Return status code or random one if multiple given as comma-delimited
        list (Underscores are also permitted as delimiters)
      operationId: get_status__codes__post
      parameters:
        - required: true
          schema:
            title: Codes
            minLength: 3
            pattern: "^[0-9,_]+$"
            type: string
          example: '200,201,204'
          name: codes
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    delete:
      tags:
        - Status Codes
      summary: Return status code or random one if multiple given as comma-delimited
        list (Underscores are also permitted as delimiters)
      operationId: get_status__codes__delete
      parameters:
        - required: true
          schema:
            title: Codes
            minLength: 3
            pattern: "^[0-9,_]+$"
            type: string
          example: '200,201,204'
          name: codes
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    patch:
      tags:
        - Status Codes
      summary: Return status code or random one if multiple given as comma-delimited
        list (Underscores are also permitted as delimiters)
      operationId: get_status__codes__patch
      parameters:
        - required: true
          schema:
            title: Codes
            minLength: 3
            pattern: "^[0-9,_]+$"
            type: string
          example: '200,201,204'
          name: codes
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/headers":
    get:
      tags:
        - Request Inspection
      summary: Return the headers sent in the request.
      operationId: get_headers_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
  "/ip":
    get:
      tags:
        - Request Inspection
      summary: Return the user's IP address.
      operationId: ip_ip_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
  "/ip/v4":
    get:
      tags:
        - Request Inspection
      summary: Return the user's IPv4 address (if present).
      operationId: ipv4_ip_v4_get
      responses:
        '200':
          description: Return the user's IPv4 address, if present.
          content:
            application/json:
              schema:
                type: string
        '422':
          description: Returned if user came in over IPv6
  "/ip/v6":
    get:
      tags:
        - Request Inspection
      summary: Return the user's IPv6 address (if present).
      operationId: ipv6_ip_v6_get
      responses:
        '200':
          description: Return the user's IPv6 address, if present.
          content:
            application/json:
              schema:
                type: string
        '422':
          description: Returned if user came in over IPv4
  "/user-agent":
    get:
      tags:
        - Request Inspection
      summary: Request the User Agent.
      operationId: user_agent_user_agent_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
  "/cache":
    get:
      tags:
        - Responses
      summary: Returns a 304 if an If-Modified-Since header or If-None-Match is present.
        Returns the same as a GET otherwise.
      operationId: cache_cache_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  "/cache/{seconds}":
    get:
      tags:
        - Responses
      summary: Sets a Cache-Control header for n seconds.
      operationId: cache_seconds_cache__seconds__get
      parameters:
        - required: true
          schema:
            title: Seconds
            type: integer
          example: 3
          name: seconds
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/etag/{etag}":
    get:
      tags:
        - Responses
      summary: Assumes the resource has the given etag and responds to If-None-Match
        and If-Match headers appropriately.
      operationId: etag_etag__etag__get
      parameters:
        - required: true
          schema:
            title: Etag
            type: string
          example: test-etag
          name: etag
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/response-headers":
    get:
      tags:
        - Responses
      summary: Set arbitrary headers in the response.  Input strings should be in
        the format of 'header:value'.
      operationId: response_headers_get_response_headers_get
      parameters:
        - required: false
          schema:
            title: Headers
            type: array
            items:
              type: string
            default: []
          name: headers
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/html":
    get:
      tags:
        - Response Formats
      summary: Returns an HTML document.
      operationId: html_html_get
      responses:
        '200':
          description: Successful Response
          content:
            text/html:
              schema:
                type: string
  "/json":
    get:
      tags:
        - Response Formats
      summary: Returns a JSON document.
      operationId: json_json_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
  "/robots.txt":
    get:
      tags:
        - Response Formats
      summary: Returns some robots.txt rules.
      operationId: robots_txt_robots_txt_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  "/deny":
    get:
      tags:
        - Response Formats
      summary: Returns a page denied by rules in robots.txt.
      operationId: deny_deny_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  "/xml":
    get:
      tags:
        - Response Formats
      summary: Returns an XML document
      operationId: xml_xml_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  "/encoding/utf8":
    get:
      tags:
        - Response Formats
      summary: Returns a UTF-8 Encoded body.
      operationId: utf8_encoding_utf8_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  "/qrcode/form":
    post:
      tags:
        - QR Codes
      summary: Returns a QR Code in PNG format from form submission.
      operationId: qrcode_post_form_qrcode_form_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              "$ref": "#/components/schemas/Body_qrcode_post_form_qrcode_form_post"
        required: true
      responses:
        '200':
          description: Return a QR Code in PNG format.
          content:
            image/png: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/qrcode/json":
    post:
      tags:
        - QR Codes
      summary: Returns a QR code in PNG format from POSTed JSON.
      operationId: qrcode_post_qrcode_json_post
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/QRCode"
        required: true
      responses:
        '200':
          description: Return a QR Code in PNG format.
          content:
            image/png: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/redirect/{n}":
    get:
      tags:
        - Redirects
      summary: 302 Redirects n times. (Note that Swagger follows redirects, so use
        the Curl command to see redirect headers.
      operationId: get_redirect__n__get
      parameters:
        - description: Number of redirects to perform
          required: true
          schema:
            title: N
            type: integer
            description: Number of redirects to perform
          example: 3
          name: n
          in: path
        - description: Status code passed in from a previous redirect
          required: false
          schema:
            title: Code
            type: integer
            description: Status code passed in from a previous redirect
            default: 302
          example: 301
          name: code
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    put:
      tags:
        - Redirects
      summary: 302 Redirects n times. (Note that Swagger follows redirects, so use
        the Curl command to see redirect headers.
      operationId: put_redirect__n__put
      parameters:
        - description: Number of redirects to perform
          required: true
          schema:
            title: N
            type: integer
            description: Number of redirects to perform
          example: 3
          name: n
          in: path
        - description: Status code passed in from a previous redirect
          required: false
          schema:
            title: Code
            type: integer
            description: Status code passed in from a previous redirect
            default: 302
          example: 301
          name: code
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    post:
      tags:
        - Redirects
      summary: 302 Redirects n times. (Note that Swagger follows redirects, so use
        the Curl command to see redirect headers.
      operationId: post_redirect__n__post
      parameters:
        - description: Number of redirects to perform
          required: true
          schema:
            title: N
            type: integer
            description: Number of redirects to perform
          example: 3
          name: n
          in: path
        - description: Status code passed in from a previous redirect
          required: false
          schema:
            title: Code
            type: integer
            description: Status code passed in from a previous redirect
            default: 302
          example: 301
          name: code
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    delete:
      tags:
        - Redirects
      summary: 302 Redirects n times. (Note that Swagger follows redirects, so use
        the Curl command to see redirect headers.
      operationId: delete_redirect__n__delete
      parameters:
        - description: Number of redirects to perform
          required: true
          schema:
            title: N
            type: integer
            description: Number of redirects to perform
          example: 3
          name: n
          in: path
        - description: Status code passed in from a previous redirect
          required: false
          schema:
            title: Code
            type: integer
            description: Status code passed in from a previous redirect
            default: 302
          example: 301
          name: code
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    patch:
      tags:
        - Redirects
      summary: 302 Redirects n times. (Note that Swagger follows redirects, so use
        the Curl command to see redirect headers.
      operationId: patch_redirect__n__patch
      parameters:
        - description: Number of redirects to perform
          required: true
          schema:
            title: N
            type: integer
            description: Number of redirects to perform
          example: 3
          name: n
          in: path
        - description: Status code passed in from a previous redirect
          required: false
          schema:
            title: Code
            type: integer
            description: Status code passed in from a previous redirect
            default: 302
          example: 301
          name: code
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/anything":
    get:
      tags:
        - Anything
      summary: Returns anything that is passed into the request.
      operationId: get_anything_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
    put:
      tags:
        - Anything
      summary: Returns anything that is passed into the request.
      operationId: put_anything_put
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
    post:
      tags:
        - Anything
      summary: Returns anything that is passed into the request.
      operationId: post_anything_post
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
    delete:
      tags:
        - Anything
      summary: Returns anything that is passed into the request.
      operationId: delete_anything_delete
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
    patch:
      tags:
        - Anything
      summary: Returns anything that is passed into the request.
      operationId: patch_anything_patch
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
  "/cookies":
    get:
      tags:
        - Cookies
      summary: Show current cookies in the browser.
      operationId: get_cookies_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
    put:
      tags:
        - Cookies
      summary: Set one or more cookies.
      operationId: put_cookies_put
      requestBody:
        content:
          application/json:
            schema:
              title: Cookies
              type: object
            example: '{"cookie1": "value1", "cookie2": "value2", "cookie3": "value3"}'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
    delete:
      tags:
        - Cookies
      summary: Delete one or more cookies.
      operationId: delete_cookies_delete
      requestBody:
        content:
          application/json:
            schema:
              title: Cookies
              type: array
              items: {}
            example: '["cookie1", "cookie2", "cookie3"]'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/images/jpeg":
    get:
      tags:
        - Images
      summary: Returns a JPEG image.
      operationId: get_images_jpeg_get
      responses:
        '200':
          description: Return an image in JPG format.
          content:
            image/jpeg: {}
  "/images/png":
    get:
      tags:
        - Images
      summary: Returns a PNG image.
      operationId: get_images_png_get
      responses:
        '200':
          description: Return an image in PNG format.
          content:
            image/png: {}
  "/images/heic":
    get:
      tags:
        - Images
      summary: Returns a HEIC image. (This may not be displayed correctly in some
        browsers)
      operationId: get_images_heic_get
      responses:
        '200':
          description: Return an image in HEIC format.
          content:
            image/heic: {}
  "/images/webp":
    get:
      tags:
        - Images
      summary: Returns a Webp image.
      operationId: get_images_webp_get
      responses:
        '200':
          description: Return an image in Webp format.
          content:
            image/webp: {}
  "/uuid":
    get:
      tags:
        - Dynamic Data
      summary: Return a type 4 UUID.
      operationId: uuid_uuid_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
  "/uuid/qrcode":
    get:
      tags:
        - Dynamic Data
      summary: Return a QR code of a type 4 UUID.
      operationId: uuid_qrcode_uuid_qrcode_get
      responses:
        '200':
          description: Return a QR Code in PNG format.
          content:
            image/png: {}
  "/uuid/qrcode/{uuid}":
    get:
      tags:
        - Dynamic Data
      summary: Return a QR code of a *specified* type 4 UUID.
      operationId: uuid_qrcode_qrcode_uuid_qrcode__uuid__get
      parameters:
        - required: true
          schema:
            title: Uuid
            type: string
          name: uuid
          in: path
      responses:
        '200':
          description: Return a QR Code in PNG format.
          content:
            image/png: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/delay/{seconds}":
    get:
      tags:
        - Dynamic Data
      summary: Return a delayed response (max of 10 seconds).
      operationId: delay_delay__seconds__get
      parameters:
        - required: true
          schema:
            title: Seconds
            type: integer
          example: 3
          name: seconds
          in: path
        - required: false
          schema:
            title: Debug
            type: boolean
          name: debug
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/stream/{n}":
    get:
      tags:
        - Dynamic Data
      summary: Steam n JSON responses.  (max of 100)
      operationId: stream_stream__n__get
      parameters:
        - required: true
          schema:
            title: N
            type: integer
          example: 3
          name: n
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/stream/chars/{n}/{rate}":
    get:
      tags:
        - Dynamic Data
      summary: Stream n bytes (max 100K) at a rate of rate per second. Max time is
        20 seconds.
      operationId: stream_chars_stream_chars__n___rate__get
      parameters:
        - required: true
          schema:
            title: N
            type: integer
          example: 128
          name: n
          in: path
        - required: true
          schema:
            title: Rate
            type: integer
          example: 50
          name: rate
          in: path
        - required: false
          schema:
            title: Debug
            type: boolean
          name: debug
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/stream/chars/complete/{n}/{rate}":
    get:
      tags:
        - Dynamic Data
      summary: Stream n bytes (max 100K) at a rate of rate per second. Any outstanding
        characters due to a low rate will be sent at the very end.  Max time is 10
        seconds.
      operationId: stream_chars_complete_stream_chars_complete__n___rate__get
      parameters:
        - required: true
          schema:
            title: N
            type: integer
          example: 128
          name: n
          in: path
        - required: true
          schema:
            title: Rate
            type: integer
          example: 50
          name: rate
          in: path
        - required: false
          schema:
            title: Debug
            type: boolean
          name: debug
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/test-password-manager-form/post":
    post:
      tags:
        - Forms
      summary: Process a sample login
      operationId: test_password_manager_form_test_password_manager_form_post_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              "$ref": "#/components/schemas/Body_test_password_manager_form_test_password_manager_form_post_post"
        required: true
      responses:
        '200':
          description: 'Valid credentials were supplied. (username: dmuth, password:
            password)'
        '401':
          description: Invalid credentials were supplied
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/version":
    get:
      tags:
        - Meta
      summary: The version of this app.
      operationId: version_version_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Version"
  "/favicon.ico":
    get:
      tags:
        - Images
      summary: Favicon endpoint
      operationId: favicon_favicon_ico_get
      responses:
        '200':
          description: Return a 32x32 favicon in JPG format.
          content:
            image/jpeg: {}
  "/static/logo.png":
    get:
      tags:
        - Images
      summary: Logo endpoint
      operationId: logo_static_logo_png_get
      responses:
        '200':
          description: Return the logo.
          content:
            image/jpeg: {}
components:
  schemas:
    Body_qrcode_post_form_qrcode_form_post:
      title: Body_qrcode_post_form_qrcode_form_post
      required:
        - url
        - box_size
        - border
      type: object
      properties:
        url:
          title: Url
          type: string
        box_size:
          title: Box Size
          type: integer
        border:
          title: Border
          type: integer
    Body_test_password_manager_form_test_password_manager_form_post_post:
      title: Body_test_password_manager_form_test_password_manager_form_post_post
      required:
        - username
        - password
      type: object
      properties:
        username:
          title: Username
          type: string
        password:
          title: Password
          type: string
    Version:
      title: Version
      type: object
      properties:
        version:
          title: Version
          type: string
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            "$ref": "#/components/schemas/ValidationError"
    QRCode:
      title: QRCode
      required:
        - url
      type: object
      properties:
        url:
          title: Url
          maxLength: 1000
          minLength: 10
          type: string
        box_size:
          title: Box Size
          maximum: 20
          exclusiveMinimum: 0
          type: integer
          default: 10
        border:
          title: Border
          maximum: 20
          exclusiveMinimum: 0
          type: integer
          default: 2
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            anyOf:
              - type: string
              - type: integer
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
tags:
  - name: HTTP Methods
    description: Testing different HTTP verbs.
  - name: Request Inspection
    description: Inspect the request data. (including source IP address)
  - name: Responses
    description: Inspect response data like caching and headers.
  - name: Response Formats
    description: Returns responses in different formats.
  - name: QR Codes
    description: Generate QR Codes.
  - name: Dynamic Data
    description: Generate random and dynamic data.
  - name: Status Codes
    description: Generate responses with specified status codes.
  - name: Redirects
    description: Return different redirects.
  - name: Anything
    description: Return anything that is passed in on the request.
  - name: Cookies
    description: Create, read, and delete cookies.
  - name: Images
    description: Return different image formats.
  - name: Forms
    description: Endpoints for testing out forms.
  - name: Meta
    description: Endpoints related to this app itself.
